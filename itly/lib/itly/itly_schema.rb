# 
# lib/itly/itly_schema.rb
# 
# This file is auto-generated by Iteratively.
# To update run 'itly pull analytics_service'
# 
# Questions? We're here to help:
# https://www.iterative.ly/docs/interacting-with-the-sdk/#ruby
# 

require 'itly/itly_base'

%w[simple_segment].each do |name|
  begin
    require name
  rescue LoadError
    raise "You don't have #{name} installed in your application. Please add it to your Gemfile and run bundle install."
  end
end

module Itly

  module Adapters
    module Vendor
      SEGMENT = "segment".freeze
    end

    class Segment < Base
      def init
        @client = ::SimpleSegment::Client.new(options.merge({ write_key: key }))
      end

      def alias(user_id, previous_id)
        client.alias(user_id: user_id, previous_id: previous_id)
      end

      def identify(user_id, properties = {})
        client.identify({ user_id: user_id }.merge({ traits: properties }))
      end

      def group(user_id, group_id, properties = {})
        client.group({ group_id: group_id, user_id: user_id }.merge({ traits: properties }))
      end

      def track(user_id, event_name, properties = {})
        client.track(user_id: user_id, event: event_name, properties: properties)
      end
    end
  end

  class << self
    # This method is a callback that is called during initialization of the main module.
    def on_initialize
      set_properties({
        itlySource:  'analytics_service',
        itlyVersion: '0.1.0'
      })

      set_validators(<<-JSON.freeze)
        {
          "https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Paused/version/2.0.0":{"$id":"https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Paused/version/2.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"Subscription Paused","description":"Fired when someone pauses their subscription.","type":"object","properties":{"subscription_id":{"description":"The ID of the subscription","type":"string"},"subscription_value":{"description":"The value of the subscription for each delivery","type":"string"},"subscription_mrr":{"description":"The Monthly Recurring Revenue of the subscription","type":"string"},"paused_reason":{"description":"The reason for the pause","type":"string"},"products":{"description":"An array of products included in this subscription","type":"string"},"subscription_time_interval":{"description":"The deliver frequency in days","type":"number"},"pause_type":{"description":"The type of pause"},"pause_length":{"description":"How long the subscription will be paused for in days","type":"number"}},"additionalProperties":false,"required":["subscription_id","subscription_value","subscription_mrr","paused_reason","products","subscription_time_interval","pause_type","pause_length"]},
          "https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Payment%20Failed/version/2.0.0":{"$id":"https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Payment%20Failed/version/2.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"Payment Failed","description":"Fired when payment fails for a subscription.","type":"object","properties":{"subscription_mrr":{"description":"The Monthly Recurring Revenue of the subscription","type":"string"},"time_interval":{"description":"The delivery frequency in days","type":"number"},"subscription_id":{"description":"The ID of the subscription","type":"string"},"subscription_value":{"description":"The value of the subscription for each delivery","type":"string"}},"additionalProperties":false,"required":["subscription_mrr","time_interval","subscription_id","subscription_value"]},
          "https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Cancelled/version/2.0.0":{"$id":"https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Cancelled/version/2.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"Subscription Cancelled","description":"Fired when someone cancels their subscription.","type":"object","properties":{"subscription_mrr":{"description":"The Monthly Recurring Revenue of the subscription","type":"string"},"subscription_cancel_request_date":{"description":"The date the subscription cancellation request was made on","type":"string"},"subscription_id":{"description":"The ID of the subscription","type":"string"},"products":{"description":"An array of products included in this subscription","type":"string"},"cancel_reason":{"description":"The reason for the cancellation","type":"string"},"subscription_value":{"description":"The value of the subscription for each delivery","type":"string"}},"additionalProperties":false,"required":["subscription_mrr","subscription_cancel_request_date","subscription_id","products","cancel_reason","subscription_value"]},
          "https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Updated/version/1.0.0":{"$id":"https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Updated/version/1.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"Subscription Updated","description":"Fired when a subscription is updated via the account management portal.","type":"object","properties":{"new_mrr":{"description":"The new monthly recurring revenue of this subscription","type":"number"},"old_percent_of_diet":{"description":"The old percent of the dog's diet that will be Kabo food","type":"number"},"old_products":{"description":"The old array of products included in this subscription","type":"string"},"new_products":{"description":"The new array of products included in this subscription","type":"string"},"old_value":{"description":"The old per-delivery value of this subscription","type":"number"},"is_downgrade":{"description":"Whether or not this change resulted in an downgrade","type":"boolean"},"is_upgrade":{"description":"Whether or not this change resulted in an upgrade","type":"boolean"},"new_percent_of_diet":{"description":"The new percent of the dog's diet that will be Kabo food","type":"number"},"new_value":{"description":"The new per-delivery value of this subscription","type":"number"},"old_mrr":{"description":"The old monthly recurring revenue of this subscription","type":"number"}},"additionalProperties":false,"required":[]},
          "https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Order%20Completed/version/3.0.0":{"$id":"https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Order%20Completed/version/3.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"Order Completed","description":"Fired when a customer completes an order. This can be either when a customer completes a new order for the first time, or a recurring order via their subscription.","type":"object","properties":{"subtotal_price":{"description":"The subtotal price of the order","type":"number"},"total_shipping":{"description":"The shipping charged to the customer for the order","type":"number"},"first_name":{"description":"The first name of the human who placed the order","type":"string"},"email":{"description":"The email associate with the order","type":"string"},"discount_code":{"description":"The discount code on the order","type":"string"},"last_name":{"description":"The last name of the human who placed the order","type":"string"},"total_price":{"description":"The total price of the order","type":"number"},"revenue":{"description":"The total revenue generated from this order","type":"number"},"products":{"description":"An array of products included in the order","type":"string"},"order_id":{"description":"The ID of the order","type":"string"},"total_tax":{"description":"The tax charged on the order","type":"number"}},"additionalProperties":false,"required":["subtotal_price","total_shipping","first_name","email","last_name","total_price","revenue","products","order_id","total_tax"]},
          "https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Created/version/2.0.0":{"$id":"https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Created/version/2.0.0","$schema":"http://json-schema.org/draft-07/schema#","title":"Subscription Created","description":"Fired every time a subscription is created.","type":"object","properties":{"subscription_id":{"description":"The ID of the subscription","type":"string"},"subscription_value":{"description":"The value of the subscription for each delivery","type":"string"},"products":{"description":"The products included in the subscription","type":"string"},"discount_code":{"description":"The discount code this subscription was created with","type":"string"},"subscription_time_interval":{"description":"The deliver frequency in days","type":"number"},"subscription_mrr":{"description":"The Monthly Recurring Revenue of the subscription","type":"string"}},"additionalProperties":false,"required":["subscription_id","subscription_value","products","discount_code","subscription_time_interval","subscription_mrr"]}
        }
      JSON

      register_adapter(
        Adapters::Vendor::SEGMENT,
        Adapters::Segment.new(
          options.production? ? "nkF2NJITf7vZWSe7OEuxDDWTjbsAiPv3" : "QtnBdiKDCJSuEyEeXrfnYn269pqGg9rk",
          options.destinations.segment
        )
      )

    end

    ##
    # Alias one user ID to another.
    #
    # Params
    # +user_id+:: +String+ The user's new ID.
    # +previous_id+:: +String+ The user's previous ID.
    #
    # Contract String, String => nil
    def alias(user_id, previous_id)
      is_initialized_and_enabled do
        @adapters.each { |adapter| adapter.alias(user_id, previous_id) }
      end
    end

    ##
    # Set or update a user's properties.
    #
    # Params
    # +user_id+:: +String+ The user's ID.
    #
    # Contract String => nil
    def identify(user_id)
      is_initialized_and_enabled do
        identify = Itly::Identify.new(

        )
        validate_schema(identify)
        @adapters.each { |adapter| adapter.identify(user_id, identify.properties) }
      end
    end

    ##
    # Set or update a user group's properties.
    #
    # Params
    # +user_id+:: +String+ The user's ID.
    # +group_id+:: +String+ The group's ID.
    #
    # Contract String, String => nil
    def group(user_id, group_id)
      is_initialized_and_enabled do
        group = Itly::Group.new(

        )
        validate_schema(group)
        @adapters.each { |adapter| adapter.group(user_id, group_id, group.properties) }
      end
    end

    ##
    # Track event 'Subscription Paused'
    #
    # Fired when someone pauses their subscription.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +paused_reason+:: +String+ The reason for the pause
    # +pause_length+:: +Float+ How long the subscription will be paused for in days
    # +pause_type+:: +SubscriptionPaused.PauseType+ The type of pause
    # +products+:: +String+ An array of products included in this subscription
    # +subscription_id+:: +String+ The ID of the subscription
    # +subscription_mrr+:: +String+ The Monthly Recurring Revenue of the subscription
    # +subscription_time_interval+:: +Float+ The deliver frequency in days
    # +subscription_value+:: +String+ The value of the subscription for each delivery
    #
    # Contract String, Float, SubscriptionPaused.PauseType, String, String, String, Float, String => nil
    def subscription_paused(user_id, paused_reason:, pause_length:, pause_type:, products:, subscription_id:, subscription_mrr:, subscription_time_interval:, subscription_value:)
      track(user_id, SubscriptionPaused.new(
        paused_reason: paused_reason,
        pause_length: pause_length,
        pause_type: pause_type,
        products: products,
        subscription_id: subscription_id,
        subscription_mrr: subscription_mrr,
        subscription_time_interval: subscription_time_interval,
        subscription_value: subscription_value 
      ))
    end

    ##
    # Track event 'Payment Failed'
    #
    # Fired when payment fails for a subscription.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +subscription_id+:: +String+ The ID of the subscription
    # +subscription_mrr+:: +String+ The Monthly Recurring Revenue of the subscription
    # +subscription_value+:: +String+ The value of the subscription for each delivery
    # +time_interval+:: +Float+ The delivery frequency in days
    #
    # Contract String, String, String, Float => nil
    def payment_failed(user_id, subscription_id:, subscription_mrr:, subscription_value:, time_interval:)
      track(user_id, PaymentFailed.new(
        subscription_id: subscription_id,
        subscription_mrr: subscription_mrr,
        subscription_value: subscription_value,
        time_interval: time_interval 
      ))
    end

    ##
    # Track event 'Subscription Cancelled'
    #
    # Fired when someone cancels their subscription.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +cancel_reason+:: +String+ The reason for the cancellation
    # +products+:: +String+ An array of products included in this subscription
    # +subscription_cancel_request_date+:: +String+ The date the subscription cancellation request was made on
    # +subscription_id+:: +String+ The ID of the subscription
    # +subscription_mrr+:: +String+ The Monthly Recurring Revenue of the subscription
    # +subscription_value+:: +String+ The value of the subscription for each delivery
    #
    # Contract String, String, String, String, String, String => nil
    def subscription_cancelled(user_id, cancel_reason:, products:, subscription_cancel_request_date:, subscription_id:, subscription_mrr:, subscription_value:)
      track(user_id, SubscriptionCancelled.new(
        cancel_reason: cancel_reason,
        products: products,
        subscription_cancel_request_date: subscription_cancel_request_date,
        subscription_id: subscription_id,
        subscription_mrr: subscription_mrr,
        subscription_value: subscription_value 
      ))
    end

    ##
    # Track event 'Subscription Updated'
    #
    # Fired when a subscription is updated via the account management portal.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +is_downgrade+:: +Bool+ Whether or not this change resulted in an downgrade
    # +is_upgrade+:: +Bool+ Whether or not this change resulted in an upgrade
    # +new_mrr+:: +Float+ The new monthly recurring revenue of this subscription
    # +new_percent_of_diet+:: +Float+ The new percent of the dog's diet that will be Kabo food
    # +new_products+:: +String+ The new array of products included in this subscription
    # +new_value+:: +Float+ The new per-delivery value of this subscription
    # +old_mrr+:: +Float+ The old monthly recurring revenue of this subscription
    # +old_percent_of_diet+:: +Float+ The old percent of the dog's diet that will be Kabo food
    # +old_products+:: +String+ The old array of products included in this subscription
    # +old_value+:: +Float+ The old per-delivery value of this subscription
    #
    # Contract Maybe[Bool], Maybe[Bool], Maybe[Float], Maybe[Float], Maybe[String], Maybe[Float], Maybe[Float], Maybe[Float], Maybe[String], Maybe[Float] => nil
    def subscription_updated(user_id, is_downgrade: nil, is_upgrade: nil, new_mrr: nil, new_percent_of_diet: nil, new_products: nil, new_value: nil, old_mrr: nil, old_percent_of_diet: nil, old_products: nil, old_value: nil)
      track(user_id, SubscriptionUpdated.new(
        is_downgrade: is_downgrade,
        is_upgrade: is_upgrade,
        new_mrr: new_mrr,
        new_percent_of_diet: new_percent_of_diet,
        new_products: new_products,
        new_value: new_value,
        old_mrr: old_mrr,
        old_percent_of_diet: old_percent_of_diet,
        old_products: old_products,
        old_value: old_value 
      ))
    end

    ##
    # Track event 'Order Completed'
    #
    # Fired when a customer completes an order. This can be either when a customer completes a new order for the first time, or a recurring order via their subscription.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +email+:: +String+ The email associate with the order
    # +first_name+:: +String+ The first name of the human who placed the order
    # +last_name+:: +String+ The last name of the human who placed the order
    # +order_id+:: +String+ The ID of the order
    # +products+:: +String+ An array of products included in the order
    # +revenue+:: +Float+ The total revenue generated from this order
    # +subtotal_price+:: +Float+ The subtotal price of the order
    # +total_price+:: +Float+ The total price of the order
    # +total_shipping+:: +Float+ The shipping charged to the customer for the order
    # +total_tax+:: +Float+ The tax charged on the order
    # +discount_code+:: +String+ The discount code on the order
    #
    # Contract String, String, String, String, String, Float, Float, Float, Float, Float, Maybe[String] => nil
    def order_completed(user_id, email:, first_name:, last_name:, order_id:, products:, revenue:, subtotal_price:, total_price:, total_shipping:, total_tax:, discount_code: nil)
      track(user_id, OrderCompleted.new(
        email: email,
        first_name: first_name,
        last_name: last_name,
        order_id: order_id,
        products: products,
        revenue: revenue,
        subtotal_price: subtotal_price,
        total_price: total_price,
        total_shipping: total_shipping,
        total_tax: total_tax,
        discount_code: discount_code 
      ))
    end

    ##
    # Track event 'Subscription Created'
    #
    # Fired every time a subscription is created.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +discount_code+:: +String+ The discount code this subscription was created with
    # +products+:: +String+ The products included in the subscription
    # +subscription_id+:: +String+ The ID of the subscription
    # +subscription_mrr+:: +String+ The Monthly Recurring Revenue of the subscription
    # +subscription_time_interval+:: +Float+ The deliver frequency in days
    # +subscription_value+:: +String+ The value of the subscription for each delivery
    #
    # Contract String, String, String, String, Float, String => nil
    def subscription_created(user_id, discount_code:, products:, subscription_id:, subscription_mrr:, subscription_time_interval:, subscription_value:)
      track(user_id, SubscriptionCreated.new(
        discount_code: discount_code,
        products: products,
        subscription_id: subscription_id,
        subscription_mrr: subscription_mrr,
        subscription_time_interval: subscription_time_interval,
        subscription_value: subscription_value 
      ))
    end
  end

  class Context < Event
    ##
    # Context properties.
    #
    # Contract  => nil
    def initialize()
      super(
        'Context',
        'context',
        {}
      )
    end
  end

  class Identify < Event
    ##
    # Identify properties.
    #
    # Contract  => nil
    def initialize()
      super(
        'Identify',
        'identify',
        {}
      )
    end
  end

  class Group < Event
    ##
    # Group properties.
    #
    # Contract  => nil
    def initialize()
      super(
        'Group',
        'group',
        {}
      )
    end
  end

  class SubscriptionPaused < Event  
    module PauseType
      # Enum has no values in tracking plan.
    end

    ##
    # Fired when someone pauses their subscription.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +paused_reason+:: +String+ The reason for the pause
    # +pause_length+:: +Float+ How long the subscription will be paused for in days
    # +pause_type+:: +SubscriptionPaused.PauseType+ The type of pause
    # +products+:: +String+ An array of products included in this subscription
    # +subscription_id+:: +String+ The ID of the subscription
    # +subscription_mrr+:: +String+ The Monthly Recurring Revenue of the subscription
    # +subscription_time_interval+:: +Float+ The deliver frequency in days
    # +subscription_value+:: +String+ The value of the subscription for each delivery
    #
    # Contract String, Float, SubscriptionPaused.PauseType, String, String, String, Float, String => nil
    def initialize(paused_reason:, pause_length:, pause_type:, products:, subscription_id:, subscription_mrr:, subscription_time_interval:, subscription_value:)
      super(
        'Subscription Paused',
        'https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Paused/version/2.0.0',
        Itly.make_compact_hash do |h|  
          h['pause_length'] = pause_length
          h['pause_type'] = pause_type
          h['paused_reason'] = paused_reason
          h['products'] = products
          h['subscription_id'] = subscription_id
          h['subscription_mrr'] = subscription_mrr
          h['subscription_time_interval'] = subscription_time_interval
          h['subscription_value'] = subscription_value
        end
      )
    end
  end

  class PaymentFailed < Event
    ##
    # Fired when payment fails for a subscription.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +subscription_id+:: +String+ The ID of the subscription
    # +subscription_mrr+:: +String+ The Monthly Recurring Revenue of the subscription
    # +subscription_value+:: +String+ The value of the subscription for each delivery
    # +time_interval+:: +Float+ The delivery frequency in days
    #
    # Contract String, String, String, Float => nil
    def initialize(subscription_id:, subscription_mrr:, subscription_value:, time_interval:)
      super(
        'Payment Failed',
        'https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Payment%20Failed/version/2.0.0',
        Itly.make_compact_hash do |h|  
          h['subscription_id'] = subscription_id
          h['subscription_mrr'] = subscription_mrr
          h['subscription_value'] = subscription_value
          h['time_interval'] = time_interval
        end
      )
    end
  end

  class SubscriptionCancelled < Event
    ##
    # Fired when someone cancels their subscription.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +cancel_reason+:: +String+ The reason for the cancellation
    # +products+:: +String+ An array of products included in this subscription
    # +subscription_cancel_request_date+:: +String+ The date the subscription cancellation request was made on
    # +subscription_id+:: +String+ The ID of the subscription
    # +subscription_mrr+:: +String+ The Monthly Recurring Revenue of the subscription
    # +subscription_value+:: +String+ The value of the subscription for each delivery
    #
    # Contract String, String, String, String, String, String => nil
    def initialize(cancel_reason:, products:, subscription_cancel_request_date:, subscription_id:, subscription_mrr:, subscription_value:)
      super(
        'Subscription Cancelled',
        'https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Cancelled/version/2.0.0',
        Itly.make_compact_hash do |h|  
          h['cancel_reason'] = cancel_reason
          h['products'] = products
          h['subscription_cancel_request_date'] = subscription_cancel_request_date
          h['subscription_id'] = subscription_id
          h['subscription_mrr'] = subscription_mrr
          h['subscription_value'] = subscription_value
        end
      )
    end
  end

  class SubscriptionUpdated < Event
    ##
    # Fired when a subscription is updated via the account management portal.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +is_downgrade+:: +Bool+ Whether or not this change resulted in an downgrade
    # +is_upgrade+:: +Bool+ Whether or not this change resulted in an upgrade
    # +new_mrr+:: +Float+ The new monthly recurring revenue of this subscription
    # +new_percent_of_diet+:: +Float+ The new percent of the dog's diet that will be Kabo food
    # +new_products+:: +String+ The new array of products included in this subscription
    # +new_value+:: +Float+ The new per-delivery value of this subscription
    # +old_mrr+:: +Float+ The old monthly recurring revenue of this subscription
    # +old_percent_of_diet+:: +Float+ The old percent of the dog's diet that will be Kabo food
    # +old_products+:: +String+ The old array of products included in this subscription
    # +old_value+:: +Float+ The old per-delivery value of this subscription
    #
    # Contract Maybe[Bool], Maybe[Bool], Maybe[Float], Maybe[Float], Maybe[String], Maybe[Float], Maybe[Float], Maybe[Float], Maybe[String], Maybe[Float] => nil
    def initialize(is_downgrade: nil, is_upgrade: nil, new_mrr: nil, new_percent_of_diet: nil, new_products: nil, new_value: nil, old_mrr: nil, old_percent_of_diet: nil, old_products: nil, old_value: nil)
      super(
        'Subscription Updated',
        'https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Updated/version/1.0.0',
        Itly.make_compact_hash do |h|  
          h['is_downgrade'] = is_downgrade
          h['is_upgrade'] = is_upgrade
          h['new_mrr'] = new_mrr
          h['new_percent_of_diet'] = new_percent_of_diet
          h['new_products'] = new_products
          h['new_value'] = new_value
          h['old_mrr'] = old_mrr
          h['old_percent_of_diet'] = old_percent_of_diet
          h['old_products'] = old_products
          h['old_value'] = old_value
        end
      )
    end
  end

  class OrderCompleted < Event
    ##
    # Fired when a customer completes an order. This can be either when a customer completes a new order for the first time, or a recurring order via their subscription.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +email+:: +String+ The email associate with the order
    # +first_name+:: +String+ The first name of the human who placed the order
    # +last_name+:: +String+ The last name of the human who placed the order
    # +order_id+:: +String+ The ID of the order
    # +products+:: +String+ An array of products included in the order
    # +revenue+:: +Float+ The total revenue generated from this order
    # +subtotal_price+:: +Float+ The subtotal price of the order
    # +total_price+:: +Float+ The total price of the order
    # +total_shipping+:: +Float+ The shipping charged to the customer for the order
    # +total_tax+:: +Float+ The tax charged on the order
    # +discount_code+:: +String+ The discount code on the order
    #
    # Contract String, String, String, String, String, Float, Float, Float, Float, Float, Maybe[String] => nil
    def initialize(email:, first_name:, last_name:, order_id:, products:, revenue:, subtotal_price:, total_price:, total_shipping:, total_tax:, discount_code: nil)
      super(
        'Order Completed',
        'https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Order%20Completed/version/3.0.0',
        Itly.make_compact_hash do |h|  
          h['discount_code'] = discount_code
          h['email'] = email
          h['first_name'] = first_name
          h['last_name'] = last_name
          h['order_id'] = order_id
          h['products'] = products
          h['revenue'] = revenue
          h['subtotal_price'] = subtotal_price
          h['total_price'] = total_price
          h['total_shipping'] = total_shipping
          h['total_tax'] = total_tax
        end
      )
    end
  end

  class SubscriptionCreated < Event
    ##
    # Fired every time a subscription is created.
    # 
    # Owner: Justin Cowperthwaite
    #
    # Params
    # +discount_code+:: +String+ The discount code this subscription was created with
    # +products+:: +String+ The products included in the subscription
    # +subscription_id+:: +String+ The ID of the subscription
    # +subscription_mrr+:: +String+ The Monthly Recurring Revenue of the subscription
    # +subscription_time_interval+:: +Float+ The deliver frequency in days
    # +subscription_value+:: +String+ The value of the subscription for each delivery
    #
    # Contract String, String, String, String, Float, String => nil
    def initialize(discount_code:, products:, subscription_id:, subscription_mrr:, subscription_time_interval:, subscription_value:)
      super(
        'Subscription Created',
        'https://iterative.ly/company/662d6770-1c1f-44bf-ab92-37781f19a49a/event/Subscription%20Created/version/2.0.0',
        Itly.make_compact_hash do |h|  
          h['discount_code'] = discount_code
          h['products'] = products
          h['subscription_id'] = subscription_id
          h['subscription_mrr'] = subscription_mrr
          h['subscription_time_interval'] = subscription_time_interval
          h['subscription_value'] = subscription_value
        end
      )
    end
  end
end
